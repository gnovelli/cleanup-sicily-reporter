name: Build and Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # Build backend
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build backend jar
        working-directory: backend
        run: chmod +x ./gradlew && ./gradlew bootJar

      - name: List backend build output
        run: ls -lh backend/build/libs

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u obiwan87 --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}:latest ./backend

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository }}:latest

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            echo "Login to GHCR..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u obiwan87 --password-stdin
            cd /home/deploy
            
            echo "Pull latest image..."
            docker compose pull
            
            echo "Restart container with env vars..."
            SPRING_PROFILES_ACTIVE=prod \
            FIREBASE_CREDENTIALS=/app/firebase-admin.json \
            FIREBASE_CREDENTIALS_PATH=/home/deploy/firebase-admin.json \
            docker compose up -d
            
            echo "Cleanup old images..."
            docker image prune -f